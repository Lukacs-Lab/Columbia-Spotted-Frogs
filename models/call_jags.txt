		#  Model prep functions for JAGS frog analysis
		#  04/2015
		#  Lukacs Lab
####################################################################################################
		require(R2jags)
		require(mcmcplots)
		setwd("C:/frog")
####################################################################################################
		#   Parameters monitored  ---- MUST CHANGE THIS BY HAND FOR EACH MODEL
		parameters <- c("mean.phi", "mean.p", "p_star", "beta1", "beta2", "beta3", "beta4")
		
		#  Source and run Charlie's function and define objects
		source("C:/Users/sara.williams/Documents/GitHub/Columbia-Spotted-Frogs/data_manip/Data_Check_Prep.R")
		fEH <- get_data()
		fsex <- get_sex_data() 
		
		y <- as.numeric(fEH$cap)	
		ind <- as.factor(fEH$Index)
		ind <- as.numeric(ind)
		prim <- as.factor(fEH$prim)
		prim <- as.numeric(prim)
		sec <- as.factor(fEH$sec)
		sec <- as.numeric(sec)
	
		n_ind <- length(unique(fEH$Index))
		n_prim <- length(unique(prim))
		n_sec <- rep(NA,n_prim)	
			for(i in 1:n_prim){
				n_sec[i] <- length(unique(sec[prim==i]))
			}
		n_obs <- nrow(fEH)
	
		
		toe <- as.numeric(fEH$toe)
		weight <- as.numeric(fEH$sc_wt)
		length <- as.numeric(fEH$sc_len)
		sex <- fsex$sex
		
		# Bundle data
		data <- list("y", "ind", "prim", "sec", "n_ind", "n_obs", "n_prim", "n_sec", "toe", "weight", "length", "sex")

							
			
			# Get model name with function
			foo <- function(weight = T, length = T, sex = T, intx1 = T, 
						intx2 = T, name = T, mod_name = NA){
		
			#  A function to create model name or directory from user inputs
			#  Takes:  A series of logical statements about what to include in 
			#   the model.  Each component represents a component of the model
			#   except for name, which determines whether the model name or the
			#   directory containing models is returned.  The directory currently
			#   relies on the user having the working directory set prior to 
			#   running this function.
			#  Returns:  A character string describing the model name or the 
			#   model directory with the model name appended to the directory.  
			#   Currently only text (.txt) file names are created...every model 
			#   name will include .txt.
			
			wt <- ifelse(weight, "weight", "n")
					
			len <- ifelse(length, "length", "n")
			
			sx <- ifelse(sex, "sex", "n")
							
			ws <- ifelse(intx1, "ws", "n")
							
			ls <- ifelse(intx2, "ls", "n")
			
			if(name){
				mod_name <- paste("toe", wt, len, sx, ws, ls, sep = "_")
				return(mod_name)
			}else{
				#  Assumes working directory is set to place where models are 
				#   stored
				mod_path <- file.path(getwd(), mod_name)
				return(mod_path)
			}
		}
	
		# Execute foo - function to create model name	
		mod_name <- foo(weight = F, 
									length = F, 
									sex = F, 
									intx1 = F, 
									intx2 = F, 
									name = T)
		
		#Initial values 
		#Function to create a matrix of initial vales for latent state z
			eh.init <- fEH$cap
			eh.init[eh.init == 0] <- 1
			
				
		#Required initial values		
			inits <- function(){
			list("mu.phi"=runif(1),
				 "mu.p"=runif(1), 
				 "beta1"=runif(1,-5,5),
				 "beta2"=runif(1,-5,5),
				 "beta3"=runif(1,-5,5),
				 "beta4"=runif(1,-5,5),
				 "z"=y) # Latent (true) state of individual i at time t
				}
				
				
		#  Call JAGS
		call_jags <- function(mod_name, 
										parallel=T,
										ni = 100,
										nt = 1,
										nb = 10,
										nc = 3){ 

						out <- jags(data = data, 
								 inits = inits, 
							     parameters.to.save = parameters,
								 model.file = paste("C:/Users/sara.williams/Documents/GitHub/Columbia-Spotted-Frogs/models/",mod_name,".txt", sep=""),
								 n.chains = nc, 
								 n.thin = nt, 
								 n.iter = ni, 
								 n.burnin = nb)
			print(out)
			alarm()
		
			# Save output of JAGS run
			save(out, file = file.path(wd, "out", paste(mod_name, 
				format(as.POSIXlt(Sys.time()), "%d%b%y_%H%M%S"), ".RData", sep = "")))
		}
		

		call_jags(mod_name)
		
		
		
			# Traceplots
			traceplot(out)
			mcmcplot(out)		
		
			# Histograms of parameters
			hist(out$BUGS$sims.list$mean.phi)
			hist(out$BUGS$sims.list$mean.p)
			hist(out$BUGS$sims.list$p_star)
			hist(out$BUGS$sims.list$beta1)
			hist(out$BUGS$sims.list$beta2)
			hist(out$BUGS$sims.list$beta3)
			hist(out$BUGS$sims.list$beta4)

		
			## See Output
			#ls()
			#out
			#names(out)
			#str(out)